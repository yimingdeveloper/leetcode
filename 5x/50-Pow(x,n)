## Leetcode 50

### Pow(x, n)

#### Solution 1: Recursion


```
class Solution {
    public double myPow(double x, int n) {
        return (n > 0) ? pow(x, n) : 1 / pow(x, -n);
    }

    private double pow(double x, int n) {
        if (n == 0) return 1.0;
        if (n == 1) return x;
        double y = pow(x, n / 2);
        return (n % 2 == 0) ? y * y : y * y * x;
    }
}
```

Time: O(logn)
Space: O(logn)

#### Solution 2: Iteration

```
class Solution {
    if (n == 0) return 1;
    double res = 1;
    long abs = Math.abs((long)n);
    while (abs > 0) {
        if (abs % 2 != 0) {
            res *= x;
        }
        x *= x;
        abs /= 2;
    }
    if (n < 0) {
        return 1.0 / res;
    }
    return res;
}
```

Time: O(logn)
Space: O(1)
